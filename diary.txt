==== Дневник разработки ====

# Памятка и обозначения
# Сверху идут старые записи, снизу - новые
# Разметка аналогична Markdown: 
# === Заголовок ===
# == Подзаголовок ==
# = Раздел =
# # - начало коментария или сноски

=== Введение ===

Судя по истории коммитов разработку я начал 05.07.2014.
Перед Ecce у меня было еще несколько движков - Powder, Ocat и ExCE.

Powder - был моим первым движком и, как и говорят - вышел комом.
Ocat был уже вторым. В нем я хотел доказать "непонимающим", что можно написать прилично играющий движок используя ООП. Ничего хорошего из этого не вышло.
ExCE планировался как экспериментальный, в нем я хотел проверить и попробовать разные интересные техники и методы, которые до меня никто не проверял.

У ExCE была хорошая цель, идея. И когда я написал базу для движка, я был готов начать эксперименты. Однако в ExCE я не сделал самого главного, что как я сейчас считаю есть в программировании шахмат.
Я не вылизывал каждый участок кода до мелочей, чтобы сделать его быстрым, эффективным и без ошибок. Также я хотел поддерживать правила рокировки Chess960 и много других вещей, которые можно отбросить.

Все движки начинались как развлечение, но превратились в разочарование - они были медленными, с плохой оценочной функцией, с плохим управлением времени.
И все чем я мог гордиться - код был чистым, красивым и понятным. Тогда я считал, что быстрый код не может быть чистым.

И наконец, спустя, наверное 2 года я решился написать еще один движок. Он был идейным продолжателем ExCE, но вместо выпуска ExCE 2 я решил подчеркнуть то, что движок полностью новый.
Ecce - новый движок, разработка которого и описывается в этом дневнике.

Ecce (Эцце) - идейный продолжатель ExCE. Я хочу использовать этот движок для опробирования и нахождения самых лучших методов используемых при построении шахматных программ.
Разработка Ecce базируется на 4ех принципах:

- Агрессивная оптимизация, проводимая даже в ущерб чистоте кода, на всем протяжении разработки.
- Проводимые эксперименты и новые внедряемые техники и методы должны проверяться, причем способом который позволяет качественно сравнить две версии - до и после внедрения с минимальной погрешностью.
- Зависимость модулей. Модульность поддерживается до тех пор, пока она не мешает оптимизации.
- Специализация. Поддерживаются только стандартные шахматные правила и 64-битная архитектура. 32-битная версия работает, но на ее тестирование отводится минимальное количество времени.

=== Идеи для ускорения ===

- Инкрементный генератор для пешек
- Генератор на буферах для коней и королей

=== Старые данные, записанные по памяти и истории коммитов ===

== 05.07.2014 ==

Написал базу, фреймворк тестирования CSTF, Coord, базовые платформо-зависимые типы вроде UNumspeed, UNummax и т.д.
Move, Bitboard, Piece, Board, Checker, Perft.

== Сводка проблемных мест ==

- Рокировка
- Энпассант
- Типы makeMove
- Генератор для пешек
- UCI
- Базовый поиск

== Сводка техник, используемых для тестирования ==

- TDD
- Ассерты
- Ручное тестирование
- Perft

== Сводка техник, используемых для оптимизации ==

- namespace'ы вместо классов
- таблицы
- объединение переменных
- устранение переходов
- таблицы функций
- платформозависимые типы

=== 07.10.2014 ===

Издержки на части поиска:

Изначальное значение скорости (в абстрактных единицах): 9143
Детектор шахов (в начале каждого узла): 9114 (ухудшение)
Оценочная функция: 26000
Прерывание поиска (по времени или команде): 10052
Вычисление PV: 9143
Позиционная оценка: 15168
Материальная оценка: 9971

=== 08.10.2014 ===

Добавил инкрементную позиционную оценку: 15449
Добавил инкрементную материальную оценку: 22516

=== 10.10.2014 ===

Форсированные варианты:

Исходная скорость поиска: 29190
С форсированными вариантами: 4600
С генератором взятий: 10872

Выбираемые ходы и стабильность позиции заметно улучшились.
Также если раньше просматривалось 22768731 узлов за 0.78 то теперь
                                  15090350 узлов за 1.40

Т.е. несмотря на то, что скорость упала почти в 3 раза от исходной, время просчета упало немного меньше чем в два раза, а получаемые ходы и оценки улучшились.

=== 13.10.2014 ===

Добавил дектектор повторов, скорость упала примерно на 20%, но на большинстве позиций я не получил прироста. И в итоге, т.к. изначально я думал что это из-за багов, написал неэффективную реализацию.
В итоге удалил и перепишу после сортировки.

=== 13.10.2014 ===

Добавил элементарное разделение на фазы - взятия и тихие ходы, парадокс, что это дало прирост в скорости в 16% и уменьшение количества просматриваемых узлов на 32.6%

Количество узлов в зависимости от базовой сортировки:

Изначальное                  - 12784857
Разбиение на взятия и тихие  - 9636301
Взятия/Тихие (KPNBRQ/QRBNPK) - 2584957
Взятия (PNBRQK)              - 2586757 (ухудшение)
Тихие ходы (KQRBNP)          - 2728101 (ухудшение)
Взятия (B-K)                 - 2585274 (ухудшение)
Тихие (B-K)                  - 2249387 (улучшение)

Избирательная сортировка по MVV/LVA после этого дала уменьшение количества узлов с
84017434 до 71229309 (18%)
и замедление (пузырьковая сортировка) на 7-13%

@TODO: Записать изменения branching factor от различных эвристик сортировки

== Детектор повторений ==

После небольшого тестирования выяснилось, что Ecce превосходит мои старые движки, но в 70% случаев играет в ничью из-за того, что они загоняют его в тройные повторения.
Это стало главной причиной того, что я решил добавить их еще раз сейчас.

Итак, таблица скоростей:

До вычисления:               5100
С вычислением:               4800
С проверкой на повторы:      4510
С проверкой на повторы в ФВ: 4500

С введением переменной:      