==== Дневник разработки ====

# Памятка и обозначения
# Сверху идут старые записи, снизу - новые
# Разметка аналогична Markdown: 
# === Заголовок ===
# == Подзаголовок ==
# = Раздел =
# # - начало коментария или сноски

=== Введение ===

Судя по истории коммитов разработку я начал 05.07.2014.
Перед Ecce у меня было еще несколько движков - Powder, Ocat и ExCE.

Powder - был моим первым движком и, как и говорят - вышел комом.
Ocat был уже вторым. В нем я хотел доказать "непонимающим", что можно написать прилично играющий движок используя ООП. Ничего хорошего из этого не вышло.
ExCE планировался как экспериментальный, в нем я хотел проверить и попробовать разные интересные техники и методы, которые до меня никто не проверял.

У ExCE была хорошая цель, идея. И когда я написал базу для движка, я был готов начать эксперименты. Однако в ExCE я не сделал самого главного, что как я сейчас считаю есть в программировании шахмат.
Я не вылизывал каждый участок кода до мелочей, чтобы сделать его быстрым, эффективным и без ошибок. Также я хотел поддерживать правила рокировки Chess960 и много других вещей, которые можно отбросить.

Все движки начинались как развлечение, но превратились в разочарование - они были медленными, с плохой оценочной функцией, с плохим управлением времени.
И все чем я мог гордиться - код был чистым, красивым и понятным. Тогда я считал, что быстрый код не может быть чистым.

И наконец, спустя, наверное 2 года я решился написать еще один движок. Он был идейным продолжателем ExCE, но вместо выпуска ExCE 2 я решил подчеркнуть то, что движок полностью новый.
Ecce - новый движок, разработка которого и описывается в этом дневнике.

Ecce (Эцце) - идейный продолжатель ExCE. Я хочу использовать этот движок для опробирования и нахождения самых лучших методов используемых при построении шахматных программ.
Разработка Ecce базируется на 4ех принципах:

- Агрессивная оптимизация, проводимая даже в ущерб чистоте кода, на всем протяжении разработки.
- Проводимые эксперименты и новые внедряемые техники и методы должны проверяться, причем способом который позволяет качественно сравнить две версии - до и после внедрения с минимальной погрешностью.
- Зависимость модулей. Модульность поддерживается до тех пор, пока она не мешает оптимизации.
- Специализация. Поддерживаются только стандартные шахматные правила и 64-битная архитектура. 32-битная версия работает, но на ее тестирование отводится минимальное количество времени.

=== Старые данные, записанные по памяти и истории коммитов ===

== 05.07.2014 ==

Написал базу, фреймворк тестирования CSTF, Coord, базовые платформо-зависимые типы вроде UNumspeed, UNummax и т.д.
Move, Bitboard, Piece, Board, Checker, Perft.

== Сводка проблемных мест ==

- Рокировка
- Энпассант
- Типы makeMove
- Генератор для пешек
- UCI
- Базовый поиск

== Сводка техник, используемых для тестирования ==

- TDD
- Ассерты
- Ручное тестирование
- Perft

== Сводка техник, используемых для оптимизации ==

- namespace'ы вместо классов
- таблицы
- объединение переменных
- таблицы функций