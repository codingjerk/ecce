#include "PST.hpp"

using namespace PST;

Score::Type *PST::tables[makeUNumspeed(1) << Piece::usedBits];

Score::Type whitePawnTable[makeUNumspeed(1) << Coord::usedBits] = {
     000,  000,  000,  000,  000,  000,  000,  000,
     500, 1000, 1000,-2000,-2000, 1000, 1000,  500,
     500, -500,-1000,  000,  000,-1000, -500,  500,
     000,  000,  000, 2000, 2000,  000,  000,  000,
     500,  500, 1000, 2500, 2500, 1000,  500,  500,
    1000, 1000, 2000, 3000, 3000, 2000, 1000, 1000,
    5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
     000,  000,  000,  000,  000,  000,  000,  000
};

Score::Type blackPawnTable[makeUNumspeed(1) << Coord::usedBits] = {
     000,  000,  000,  000,  000,  000,  000,  000,
    5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
    1000, 1000, 2000, 3000, 3000, 2000, 1000, 1000,
     500,  500, 1000, 2500, 2500, 1000,  500,  500,
     000,  000,  000, 2000, 2000,  000,  000,  000,
     500, -500,-1000,  000,  000,-1000, -500,  500,
     500, 1000, 1000,-2000,-2000, 1000, 1000,  500,
     000,  000,  000,  000,  000,  000,  000,  000
};

Score::Type whiteKnightTable[makeUNumspeed(1) << Coord::usedBits] = {
    -5000,-4000,-3000,-3000,-3000,-3000,-4000,-5000,
    -4000,-2000,  000,  500,  500,  000,-2000,-4000,
    -3000,  500, 1000, 1500, 1500, 1000,  500,-3000,
    -3000,  000, 1500, 2000, 2000, 1500,  000,-3000,
    -3000,  500, 1500, 2000, 2000, 1500,  500,-3000,
    -3000,  000, 1000, 1500, 1500, 1000,  000,-3000,
    -4000,-2000,  000,  000,  000,  000,-2000,-4000,
    -5000,-4000,-3000,-3000,-3000,-3000,-4000,-5000
};

Score::Type  blackKnightTable[makeUNumspeed(1) << Coord::usedBits] = {
    -5000,-4000,-3000,-3000,-3000,-3000,-4000,-5000,
    -4000,-2000,  000,  000,  000,  000,-2000,-4000,
    -3000,  000, 1000, 1500, 1500, 1000,  000,-3000,
    -3000,  500, 1500, 2000, 2000, 1500,  500,-3000,
    -3000,  000, 1500, 2000, 2000, 1500,  000,-3000,
    -3000,  500, 1000, 1500, 1500, 1000,  500,-3000,
    -4000,-2000,  000,  500,  500,  000,-2000,-4000,
    -5000,-4000,-3000,-3000,-3000,-3000,-4000,-5000
};

Score::Type whiteBishopTable[makeUNumspeed(1) << Coord::usedBits] = {
    -2000,-1000,-1000,-1000,-1000,-1000,-1000,-2000,
    -1000,  500,  000,  000,  000,  000,  500,-1000,
    -1000, 1000, 1000, 1000, 1000, 1000, 1000,-1000,
    -1000,  000, 1000, 1000, 1000, 1000,  000,-1000,
    -1000,  500,  500, 1000, 1000,  500,  500,-1000,
    -1000,  000,  500, 1000, 1000,  500,  000,-1000,
    -1000,  000,  000,  000,  000,  000,  000,-1000,
    -2000,-1000,-1000,-1000,-1000,-1000,-1000,-2000
};

Score::Type blackBishopTable[makeUNumspeed(1) << Coord::usedBits] = {
    -2000,-1000,-1000,-1000,-1000,-1000,-1000,-2000,
    -1000,  000,  000,  000,  000,  000,  000,-1000,
    -1000,  000,  500, 1000, 1000,  500,  000,-1000,
    -1000,  500,  500, 1000, 1000,  500,  500,-1000,
    -1000,  000, 1000, 1000, 1000, 1000,  000,-1000,
    -1000, 1000, 1000, 1000, 1000, 1000, 1000,-1000,
    -1000,  500,  000,  000,  000,  000,  500,-1000,
    -2000,-1000,-1000,-1000,-1000,-1000,-1000,-2000
};

Score::Type whiteRookTable[makeUNumspeed(1) << Coord::usedBits] = {
     000,  000,  000,  500,  500,  000,  000,  000,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
     500, 1000, 1000, 1000, 1000, 1000, 1000,  500,
     000,  000,  000,  000,  000,  000,  000,  000
};

Score::Type blackRookTable[makeUNumspeed(1) << Coord::usedBits] = {
     000,  000,  000,  000,  000,  000,  000,  000,
     500, 1000, 1000, 1000, 1000, 1000, 1000,  500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
    -500,  000,  000,  000,  000,  000,  000, -500,
     000,  000,  000,  500,  500,  000,  000,  000
};

Score::Type whiteQueenTable[makeUNumspeed(1) << Coord::usedBits] = {
    -2000,-1000,-1000, -500, -500,-1000,-1000,-2000,
    -1000,  000,  500,  000,  000,  000,  000,-1000,
    -1000,  500,  500,  500,  500,  500,  000,-1000,
      000,  000,  500,  500,  500,  500,  000, -500,
     -500,  000,  500,  500,  500,  500,  000, -500,
    -1000,  000,  500,  500,  500,  500,  000,-1000,
    -1000,  000,  000,  000,  000,  000,  000,-1000,
    -2000,-1000,-1000, -500, -500,-1000,-1000,-2000
};

Score::Type blackQueenTable[makeUNumspeed(1) << Coord::usedBits] = {
    -2000,-1000,-1000, -500, -500,-1000,-1000,-2000,
    -1000,  000,  000,  000,  000,  000,  000,-1000,
    -1000,  000,  500,  500,  500,  500,  000,-1000,
     -500,  000,  500,  500,  500,  500,  000, -500,
      000,  000,  500,  500,  500,  500,  000, -500,
    -1000,  500,  500,  500,  500,  500,  000,-1000,
    -1000,  000,  500,  000,  000,  000,  000,-1000,
    -2000,-1000,-1000, -500, -500,-1000,-1000,-2000
};

Score::Type whiteKingTable[makeUNumspeed(1) << Coord::usedBits] = {
     2000, 3000, 1000,  000,  000, 1000, 3000, 2000,
     2000, 2000,  000,  000,  000,  000, 2000, 2000,
    -1000,-2000,-2000,-2000,-2000,-2000,-2000,-1000,
    -2000,-3000,-3000,-4000,-4000,-3000,-3000,-2000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000
};

Score::Type blackKingTable[makeUNumspeed(1) << Coord::usedBits] = {
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -3000,-4000,-4000,-5000,-5000,-4000,-4000,-3000,
    -2000,-3000,-3000,-4000,-4000,-3000,-3000,-2000,
    -1000,-2000,-2000,-2000,-2000,-2000,-2000,-1000,
     2000, 2000,  000,  000,  000,  000, 2000, 2000,
     2000, 3000, 1000,  000,  000, 1000, 3000, 2000
};

Score::Type nullTable[makeUNumspeed(1) << Coord::usedBits] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
};

#define REVERSE(table) for (auto &s: table) s = -s;

void PST::initTables() {
	REVERSE(blackPawnTable);
	REVERSE(blackKnightTable);
	REVERSE(blackBishopTable);
	REVERSE(blackRookTable);
	REVERSE(blackQueenTable);
	REVERSE(blackKingTable);

    tables[Piece::create(White, Pawn)] = whitePawnTable;
    tables[Piece::create(Black, Pawn)] = blackPawnTable;
    
    tables[Piece::create(White, Knight)] = whiteKnightTable;
    tables[Piece::create(Black, Knight)] = blackKnightTable;
    
    tables[Piece::create(White, Bishop)] = whiteBishopTable;
    tables[Piece::create(Black, Bishop)] = blackBishopTable;
    
	tables[Piece::create(White, Rook)] = whiteRookTable;
    tables[Piece::create(Black, Rook)] = blackRookTable;
    
	tables[Piece::create(White, Queen)] = whiteQueenTable;
    tables[Piece::create(Black, Queen)] = blackQueenTable;
    
	tables[Piece::create(White, King)] = whiteKingTable;
    tables[Piece::create(Black, King)] = blackKingTable;
}